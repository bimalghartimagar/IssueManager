@page "/ticket/{id:int}"
@using Domain.Model
@using ThirdParty.Api.Interface
@using Util
@inject ITicketService TicketFetchService
@inject IJSRuntime JS

<div class="rounded shadow mt-8 pb-1 border border-indigo-400">
    <div class="w-full text-left p-4 text-xl bg-indigo-400 shadow">Details of ticket #@Id</div>
    @if (ticket != null)
    {
        <div class="grid grid-cols-3 gap-4 shadow p-3">
            <div>Created At: @CreatedProxy</div>
            <div>Updated At: @UpdatedProxy</div>
            <div>
                Status:
                <span
                class="rounded-lg text-white px-4 py-1 text-sm capitalize @Utility.GetStatusColor(ticket.Status)">@ticket.Status</span>
            </div>
        </div>
        <div class="m-4 p-2 rounded shadow text-left border border-gray-400">
            <div class="p-4 font-semibold text-xl bg-gray-400">@ticket.Title</div>
            <div class="p-4 m-4 ">@ticket.Description</div>
        </div>
        <div class="text-left m-4 p-2">
            <div>Attachments:</div>
            <div class="flex flex-wrap gap-x-2">
                @for (int i = 0; i < ticket.Attachments.Count; i++)
                {
                    <img src="@ticket.Attachments[i].Path" class="h-40 w-40 p-1 rounded shadow-lg border border-gray-400"/>
                }
            </div>
        </div>
    }

</div>

@code {
    [Parameter]
    public int Id { get; set; }
    public Ticket ticket { get; set; }
    public string CreatedProxy { get; set; }
    public string UpdatedProxy { get; set; }
    protected override async Task OnInitializedAsync()
    {
        ticket = await TicketFetchService.GetTicket(Id);
        CreatedProxy = await JS.InvokeAsync<string>("getReadableDateTime", ticket.CreatedAt.ToString("o"));
        UpdatedProxy = await JS.InvokeAsync<string>("getReadableDateTime", ticket.UpdatedAt.ToString("o"));
    }
}